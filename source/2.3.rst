2.3 事件的动态属性
~~~~~~~~~~~~~~~~~~~~

动态属性不会在编译阶段解析，而是在运行时通过动态类型解析。


动态属性是基于事先不知道一个给定的事件表述的所有属性。一个底层事件通常有一些在语句编译阶段不确定但又需要查询的属性。它在对那些有丰富的，面向对象的领域模型的事件描述上将非常有用。

动态属性的语法包括属性名和一个问号。索引，映射和嵌套属性也可以是动态属性：

**Table 2.3. 事件属性类型**

+-------------------------+-----------------------------+
|Type                     |   Syntax                    |
+=========================+=============================+
|  Dynamic Simple         | name?                       |
+-------------------------+-----------------------------+
|  Dynamic Indexed        | name[index]?                |
+-------------------------+-----------------------------+
|  Dynamic Mapped         | name('key')?                |
+-------------------------+-----------------------------+
|  Dynamic Nested         | name?.nestedPropertyName    |
+-------------------------+-----------------------------+

动态属性通常返回java.lang.Object类型。当然，在运行时事件处理中的动态属性不存在时将会返回一个null。

比如：一个OrderEvent事件提供了一个“item”属性。这个“item”属性是Object类型并且拥有一个指向一个服务或者产品实的引用。

假设这个服务或者产品都提供了一个“price”的属性。通过动态属性可以实现通过一个查询得到这个服务或者产品的price属性。

select item.price? from OrderEvent

第二个例子：假设Service类有一个“serviceName”属性而Product类没有。下面的查询将会对Service对象返回一个“serviceName”属性，而对“Product”对象返回一个null。

select item.serviceName? from OrderEvent

考虑到有些情况下OrderEvent有多种不同的实现类，有些拥有“timestamp”属性。接下来的查询将会对那些有这个属性并实现了OrderEvent接口的类返回一个“timestamp”属性。

select timestamp? from OrderEvent

上面的查询将返回一个单一列的“timestamp”对象类型。

当查询嵌套的动态属性时，所有的动态属性下的属性都将认为是动态属性。下面的例子是查询有“detail”动态属性返回的对象的“direction”属性。

select detail?.direction from OrderEvent

它等同与：

select detail?.direction? from OrderEvent

这种查询通常用于有连接的动态属性查询中：

cast函数将一个动态属性的值（或表达式的值）嵌套给一个指定类型。

exists函数会检查一个动态属性是否存在。如果一个事件有指定名字的属性将返回true，否则返回false。

instanceof函数会检查动态属性的值（或表达式的值）是否是指定类型。

typeof函数会返回动态的属性的string类型的属性名。

动态事件属性可以使用于下列事件类型：Java Objects, Map-based, Object-array-based and XML DOM-based events.
